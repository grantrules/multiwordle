# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  # The Node.js orb contains a set of prepackaged CircleCI configuration you can utilize
  # Orbs reduce the amount of configuration required for common tasks.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/node
  node: circleci/node@5.0

jobs:
  build-app-image:
    #working_directory: ~/project/app
    docker:
      - image: docker:19.03-git
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.14
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
          paths:
            - /caches/app.tar
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /caches/app.tar | true
      - run:
          name: Build application Docker image
          command: |
            cd app && docker build --cache-from=multiwordle:app -t multiwordle:app .
      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches
            docker save -o /caches/app.tar multiwordle:app
      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - /caches/app.tar
      - run:
          name: Upload to docker registry
          command: |
            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin $DOCKER_HOST
            docker push multiworlde:server
      #- run:
      #    name: Run tests
      #    command: |
      #      docker-compose -f ./docker-compose.yml up




  build-server-image:
    docker:
      - image: docker:19.03-git
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.14
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
          paths:
            - /caches/server.tar
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /caches/server.tar | true
      - run:
          name: Build application Docker image
          command: |
            cd server && docker build --cache-from=multiwordle:server -t multiwordle:server .
      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches
            docker save -o /caches/server.tar multiwordle:server
      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - /caches/server.tar
      #- run:
      #    name: Run tests
      #    command: |
      #      docker-compose -f ./docker-compose.yml up

  push-images:
    docker:
      - image: docker:19.03-git
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.14
      - run:
        name: Upload to docker registry
        command: |
          echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin $DOCKER_HOST
          docker push multiworlde:server
          docker push multiworlde:app
  test:
    docker:
      - image: cimg/node:17.4
    steps:
      - checkout
      - node/install-packages:
          app-dir: ~/project/app
          pkg-manager: npm
      - run:
          name: Run tests
          command: cd ~/project/app && npm test

workflows:
  build:
    jobs:
      - test
      - build-app-image:
          requires:
            - test
          filters:
            branches:
              only:
                - master
      - build-server-image:
          requires:
            - test
          filters:
            branches:
              only:
                - master
      - push-images:
          requires:
            - build-app-image
            - build-server-image